#!/usr/bin/env python
'''
Created on Mar, 2016

@author: eml
'''
#os.system('pygmentize -g ' + sys.argv[0])
from color import *
eprtdoc('''
#__init__.py will run when you import a package.
  For instance, import idlelib within a program, runs idlelib/__init__.py
#__main__.py will run when you run a package as the main program.
  For instance, python -m idlelib at a command line runs idlelib/__main__.py,

#1.  sys.path
As long as the parent directory is on sys.path you will be able to call:
import mymodule       #or
from mymodule.submodule import something

#2.  __init__.py
You are dealing with a package. The package structure you should have is:
/dir_in_sys.path
    /mypackage             # This is not really a module - it's a package
        __init__.py         # loaded when you `import mypackage` or anything below it
        some.py             # import mypackage.some
        implementation.py   # import mypackage.implementation
        files.py            # import mypackage.files
        /submodule
            __init__.py       # loaded when you `import mypackage.submodule` or anything below it
            submodule_impl.py # import mypackage.submodule.submodule_impl
            goes.py           # import mypackage.submodule.goes
            here.py           # import mypackage.submodule.here
2.1 suppose class CustomClass is defined in the submodule_impl.py module
2.2  in __init__.py, add below
from .submodule_impl import CustomClass
2.3 #Now CustomClass can be imported directly from submodule
from mymodule.submodule import CustomClass
''')
ebrun('''
#for example below: 
#1. import unitest will run __init__.py automaticaly
#2. in __init__.py, result.py is importted
#3. as a result all classes in result.py can be used now
import unittest
print unittest.__file__
print [x for x in open(unittest.__file__[0:-1]) if 'from .result' in x]
print next(x for x in open(unittest.__file__[0:-1]) if 'from .result' in x)
print unittest
print unittest.result
print unittest.TestResult
''')
