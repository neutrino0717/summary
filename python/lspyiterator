#!/usr/bin/env eepython
##what is iterable: 
#An iterable is an object that you can get an iterator from.
#list, str, xrange, dict, file are iterable
#An iterable is an object that has 
#1. __iter__()   #method which returns an iterator,  or
#2. __getitem__  #method 

##what is iterator:
#An iterator is an object with a next (Python 2) or __next__ (Python 3) method. 
#Iterator objects are required to support the following two methods
#1. __iter__()
#    Return the iterator object itself
#    allow both containers and iterators to be used with the for and in statements.
#2. next()   #I think it's generator instead of Iterator
#    Return the next item from the container. If there are no further items, raise the StopIteration exception. 

#Whenever you use a for loop, or map, or a list comprehension, etc. in Python, the next method is called automatically to get each item from the iterator, thus going through the process of iteration.

##iterable
#1. Iterable_instance.__iter__()  --> Iterrator_instance
#2. iter(Iterable_instance)       --> Iterrator_instance
#3. Iterable_instance.__getitem__()->  the item of the index
##iterator
#1. Iterator_instance.__iter__() --> get the iterator itself
#2. Iterator_instance.next()      --> get item for python 2
#3. Iterator_instance.__next__()  --> get item for python 3

#fname=os.path.dirname(os.path.abspath(__file__))+'/color.py'
fname=os.path.join(os.path.expanduser('~'), 'graduation/python/color.py')
x=[1,2,3];           print type(iter(x)), type(x.__iter__()), x.__getitem__(1)
x='123';             print type(iter(x)),                     x.__getitem__(1)
x=xrange(1,4);       print type(iter(x)), type(x.__iter__()), x.__getitem__(1)
x=range(1,4);        print type(iter(x)), type(x.__iter__()), x.__getitem__(1)
with open(fname) as x:print type(x), type(iter(x)), type(x.__iter__())

i=iter([1,2,3]);     print i.next(), i.next(), i.next()
i=iter('123');       print i.next(), i.next(), i.next()
i=iter(xrange(1,4)); print i.next(), i.next(), i.next()
i=iter(range(1,4));  print i.next(), i.next(), i.next()
i=open(fname);       print i.next(), i.next(), i.next()
ii=iter(i);          print ii.next(),ii.next(),ii.next(); i.close()

#use the 'globl' next() method
i=iter([1,2,3]);     print next(i), next(i), next(i)
i=open(fname);       print next(i), next(i), next(i); i.close()

#iterator type 1 --> str
print "__getitem__" in  dir(str)
for c in 'python': print c,

#iterator type 2 --> list
for i in [1,2,3,4]: print i,
for i in iter([1,2,3,4]): print i,

#iterator type 3: dictionary
for k in {"feng":36, "yu":25, "zhong":27}: print k,
for k in  {"feng":36, "yu":25, "zhong":27}.keys(): print k,
for k in  {"feng":36, "yu":25, "zhong":27}.values(): print k,
for k in  {"feng":36, "yu":25, "zhong":27}.items(): print k,

#iterator type 4: read file
with open("/etc/hosts") as f:
    print type(f) 
    for line in f: print line,
