#!/usr/bin/env eepython
from collections import Counter
from pprint import pprint
import inspect
##A Counter is a dict subclass for counting hashable objects.
print inspect.getmro(Counter)

##class collections.Counter([iterable-or-mapping])
c = Counter();                      print c
c = Counter({'red': 4, 'blue': 2}); print c
c = Counter(['eggs', 'ham']);       print c
c = Counter('gallahad');            print c
c = Counter(cats=4, dogs=8);        print c

##for missing items return 0, instead of raising a KeyError
c = Counter(['eggs', 'ham']);       print c, c['hello'], c.get('hello')

## elements() return an iterator over elements repeating each as many times as its count
c = Counter(a=4, b=2, c=0, d=-2);   print c.elements(); print list(c.elements())

## most_common([n]) Return a list of the n most common elements and their counts from the most common to the least
print Counter('abracadabra').most_common(3)

## subtract([iterable-or-mapping]) Elements are subtracted from an iterable or from another mapping (or counter).
c = Counter(a=4, b=2, c=0, d=-2)
d = Counter(a=1, b=2, c=3, d=4)
c.subtract(d); print c
print sum(c.values())            # total of all counts, aka, 3 + 0 + (-3) + (-6)
c+=Counter();  print c           # remove zero and negative counts

##
c = Counter(a=3, b=1)
d = Counter(a=1, b=2)
print c + d                       # add two counters together:  c[x] + d[x]
print c - d                       # subtract (keeping only positive counts)
print c & d                       # intersection:  min(c[x], d[x])
print c | d                       # union:  max(c[x], d[x])
