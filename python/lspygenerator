#!/usr/bin/env eepython
#myview:
#1. creating a function with yield statement in it
#2. then the function would return a generator object
#3. generator object is a iterator object, support next() method
#
#myview:
#1. generator function is a function with yield statement inside
#2. generator function return generator object
#3. generator object is iterator

#Every generator is an iterator, but not vice versa. A generator is built by calling a function that has one or more yield 
def city_generator():
    yield("Konstanz")
    yield("Zurich")
    yield("Schaffhausen")
    yield("Stuttgart")

x=city_generator()
#import inspect; inspect.getmro(x)
print type(x), type(type(x))
print x
print x.next()
print x.next()
print x.next()
print x.next()

#'i for i in list if' syntax will return a generator
g=(x for x in os.listdir('/etc') if '.conf' in x)
print g
print g.next()
print g.next()
print g.next()
g2=[x for x in glob.glob('/etc/*.conf')]
print g2
