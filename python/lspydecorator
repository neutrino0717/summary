#!/usr/bin/env eepython
###----------------------------------------------------- 
##Three functions
##1. the function to define decorator    :addone
##2. the function as input of decorator  :myfunc
##3. the function as output of decorator :addoneinside
###-----------------------------------------------------
##args:    means regular arguments
##kwargs:  means keyword arguments
##def func(*args, **kwargs):   
##  *args mean all elemetns in args, 
##  **kwargs means all elements in kwargs
##usage:
##  func(1,2,3,x=4,y=5)
##  a=[1,2,3]; b={x:4,y:5}; func(*a,**b)
###-----------------------------------------------------

##Nested functions
def outer():
    x=1
    def inner():
        print x
    inner()
outer()

##functions are also classes, functions contains variable
import inspect
def foo():
    pass
class bar(object):
    pass
print foo.__class__
print object.__class__
print bar.__class__
print issubclass(foo.__class__, object)
print issubclass(bar.__class__, object)
#print inspect.getmro(foo)
print inspect.getmro(bar)

##Python supports a feature called function closures, functions remember their enclosing scope'
def outer():
    x=4
    def inner():
        print x        #print 4
        return x*x     #return 16
    return inner
foo=outer()
print foo.func_closure
print foo()  #foo() is inner(), and have access to x=1

##1. before decorator
def addone(myfunc):
    def addoneinside(): return myfunc()+1
    return addoneinside
def oldfunc(): return 3

newfunc=addone(oldfunc)
print oldfunc()
print newfunc()

##2. with decorator
def addone(myfunc):
    def addoneinside():
        return myfunc()+1
    return addoneinside
@addone                      #--->add decorator here
def oldfunc():
    return 3
#newfunc=addone(oldfunc)     #--->replaced by decorator
print oldfunc()

##3. with decorator and general arguments
def addone(myfunc):
    def addoneinside(*args, **kwargs):
        return myfunc(*args, **kwargs)+1
    return addoneinside
@addone
def oldfunc(x):
    return x
print oldfunc(3)
