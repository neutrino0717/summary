#!/usr/bin/env eepython
##__dict__ of object, A, B(object), a
import inspect
from pprint import pprint
class A:
    pass
class B(object):
    pass
a = A(); b=B()

pprint(dict(object.__dict__))
pprint(A.__dict__)
print(B.__dict__)
print(B.__dict__['__dict__'])
pprint(a.__dict__)
pprint(b.__dict__)

##dictproxy is a special class
#will not work, for dictproxy is python internal
#print inspect.getmro(object.__dict__)
print type(A.__dict__), type(B.__dict__),type(object.__dict__)
print type(a.__dict__), type(b.__dict__)

##__dict__ of A, a
class A:
    x = 99             #class level variable is defined outside of any methods
    def __init__(self):
        self.z = 100
print A.__dict__; print type(A.__dict__)

a = A(); a.y = 11
print a.__class__.__dict__
#no x, for x belongs to the class attribute
print a.__dict__
print a.x; a.x = 7; print a.x
print a.__dict__
