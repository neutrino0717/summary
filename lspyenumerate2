#!/usr/bin/env eepython
##enumerate(sequence, start=0)
#Return an enumerate object. sequence must be a sequence, an iterator, or some other object which supports iteration. The next() method of the iterator returned by enumerate() returns a tuple containing a count (from start which defaults to 0) and the values obtained from iterating over sequence:
#
##my_enumerate() below is similar to enmerate(), however
#The real enumerate function returns an iterator, not an generator. You can see this if you call help(x) after doing creating an enumerate object:
#
#In Python, generators are basically a specific type of iterator that's implemented by using a yield to return data from a function. 
#However, enumerate is actually implemented in C, not pure Python, so there's no yield involved. You can find the source here: http://hg.python.org/cpython/file/2.7/Objects/enumobject.c
#
def my_enumerate(sequence, start=0):
    n = start
    for elem in sequence:
        yield n, elem
        n += 1
e=enumerate    (["spring", "summer","fall" ,"winter"], 1)
##enumerate return an iterator(enumerate is iterator)
print type(e), dir(e)
print list(e)
import inspect; print inspect.getmro(enumerate)

##my_enumerate return a generator
e=my_enumerate (["spring", "summer","fall" ,"winter"], 1)
print type(e), dir(e)
print list(e)

## use for loop
e=enumerate    (["spring", "summer","fall" ,"winter"])
for i in e: print i
e=my_enumerate (["spring", "summer","fall" ,"winter"])
for i in e: print i
