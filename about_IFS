IFS    
   The  Internal Field Separator that is used for word splitting after expansion and to split lines into words 
   with the read builtin command.  The default value is ``<space><tab><newline>''.
 
###set IFS temparorily###
IFS=$'.'  read i1 i2 i3 i4 <<<"10.11.22.33"; echo "$IFS"               #
IFS=$'.'; read i1 i2 i3 i4 <<<"10.11.22.33"; echo "$IFS"               #.
 
###set###
#split according to ","
bash <<< '       line="Hi, spring is coming"; set $line;                  echo "$1|$2|$3|$4|$5|$6"'     #Hi,|spring|is|coming||
bash <<< 'IFS=,; line="Hi, spring is coming"; set $line;                  echo "$1|$2|$3|$4|$5|$6"'     #Hi| spring is coming||||   #right
bash <<< 'IFS=,;                              set "Hi, spring is coming"; echo "$1|$2|$3|$4|$5|$6"'     #Hi, spring is coming|||||  #wrong
 
###for..in###
#split according to ","
bash <<< '       line="Hi, spring is coming"; for i in $line;                  do echo -n "$i|"; done'  #Hi,|spring|is|coming|      #wrong
bash <<< 'IFS=,; line="Hi, spring is coming"; for i in $line;                  do echo -n "$i|"; done'  #Hi| spring is coming|      #right
bash <<< 'IFS=,;                              for i in "Hi, spring is coming"; do echo -n "$i|"; done'  #Hi, spring is coming|      #wrong
 
###echo###
bash<<<'a="u,v:w,x:y,z"; IFS=',:';  echo $a'      #u v w x y z
bash<<<'a="u,v:w,x:y,z"; IFS=$',:'; echo $a'      #u v w x y z
bash<<<'a="u,v:w,x:y,z"; IFS=$',';  echo $a'      #u v:w x:y z
bash<<<'a="u-v:w-x:y-z"; IFS=':';   echo $a'      #u-v w-x y-z
 
###"$*" "${a[*]}"###
Note that  $* use the first character held in $IFS to as word boundary
e.g. for IFS=":-;",  $* will use ":"
myview: $* will add the IFS for output
bash<<<'set w x y z; IFS=":-;";  echo "$@"'       #w x y z
bash<<<'set w x y z; IFS=":-;";  echo "$*"'       #w:x:y:z
bash<<<'set w x y z; IFS="-;:";  echo "$*"'       #w-x-y-z
bash<<<'set w x y z; IFS="-;:";  echo  $* '       #w x y z
bash<<<'a=(w x y z); IFS="-;:";  echo "${a[*]}"'  #w-x-y-z
bash<<<'a=(w x y z); IFS="-;:";  echo  ${a[*]} '  #w x y z
bash<<"EOF"
a=(w x y z); IFS=$'\n\t';  echo  "${a[*]}"        
EOF
                                                  #w
                                                  #x
                                                  #y
                                                  #z
 
###read to variable or array###
IFS=$'.' read i1 i2 i3 i4 <<<"10.11.22.33"; echo "$i4,$i3,$i2,$i1"                #33,22,11,10
IFS=$'.' read -a i <<<"10.11.22.33";        echo "${i[@]}"                        #10 11 22 33
IFS=$'.' read -a i <<<"10.11.22.33";        echo "${i[*]}"                        #10.11.22.33
IFS=$'.' read -a i <<<"10.11.22.33";        for a in "${i[@]}"; do echo $a; done


#other
echo ">$IFS<"
OLDIFS=IFS; IFS=:; for dir in $PATH; do ls -ld $dir;                         done; IFS=OLDIFS
                    while [ $path ]; do ls -ld ${path%%:*}; path=${path#*:}; done
