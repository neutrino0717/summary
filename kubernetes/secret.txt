keyword: 
config, overrideConfig
filebeat_yml

##value.yaml                                       ##charts/filebeat/templates/secret.yaml
config:                                            apiVersion: v1
  filebeat.config:                                 kind: Secret
    modules:                                       metadata:
      path: ${path.config}/modules.d/*.yml           name: {{ template "filebeat.fullname" . }}
      # Reload module configs as they change:        labels:
      reload.enabled: false                            app.kubernetes.io/name: {{ template "filebeat.name" . }}
                                                       helm.sh/chart: {{ template "filebeat.chart" . }}
  processors:                                          app.kubernetes.io/instance: {{ .Release.Name }}
    - add_cloud_metadata:                              app.kubernetes.io/managed-by: {{ .Release.Service }}
                                                   type: Opaque
  filebeat.inputs:                                 data:
    - type: log                                      filebeat_yml: {{ toYaml (default .Values.config .Values.overrideConfig) | indent 4 | b64enc }}
      enabled: true                                  {{- if .Values.extraSecrets }}
      paths:                                         {{- range $key, $value := .Values.extraSecrets }}
        - /var/log/*.log                             {{ $key }}: {{ $value | b64enc }}
        - /var/log/messages                          {{- end -}}
        - /var/log/syslog                            {{ end }}
    - type: docker                                    ---------------------------
      containers.ids:                                     #secret.yaml
      - "*"                                               apiVersion: v1
      processors:                                         kind: Secret
        - add_kubernetes_metadata:                        metadata:
            in_cluster: true                                name: elkdebug_filebeat
        - drop_event:                                       labels:
            when:                                             app.kubernetes.io/name: filebeat
              equals:                                         helm.sh/chart: filebeat-3.1.1
                kubernetes.container.name: "filebeat"         app.kubernetes.io/instance: elkdebug
  output.file:                                                app.kubernetes.io/managed-by: Tiller
    path: "/usr/share/filebeat/data"                      type: Opaque
    filename: filebeat                                    data:
    rotate_every_kb: 10000                                  filebeat_yml: ICAgIGZpbGViZWF0LmNvbmZpZzoKICAgICAgbW9kdWx
    number_of_files: 5                                      lczoKICAgICAgICBwYXRoOiAke3BhdGguY29uZmlnfS9tb2R1bGVzLmQS
  # When a key contains a period, use this format           vKi55bWwKICAgICAgICByZWxvYWQuZW5hYmxlZDogZmFsc2UKICAgIGZp
  # for setting values on the command line:                 bGViZWF0LmlucHV0czoKICAgIC0gZW5hYmxlZDogdHJ1ZQogICAgICBwY
  # --set config."http\.enabled"=true                       ...
  http.enabled: true
  http.port: 5066
# If overrideConfig is not empty, filebeat chart's default config won't be used at all.
overrideConfig: {}

##filebeat
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: elkdebug-filebeat
  labels:
    app.kubernetes.io/name: filebeat
    helm.sh/chart: filebeat-3.1.1
    app.kubernetes.io/instance: elkdebug
    app.kubernetes.io/managed-by: Tiller
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: filebeat
      app.kubernetes.io/instance: elkdebug
  minReadySeconds: 10
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: filebeat
        app.kubernetes.io/instance: elkdebug
      annotations:
        checksum/secret: 2a1e28e06ebdd54d8f28bfcf4e8ecda268885fd5b19b274b6feee0cff1f0dd73
    spec:
      initContainers:
      containers:
      - name: filebeat
        image: "172.28.13.187/library/filebeat-oss:7.0.1"
        imagePullPolicy: IfNotPresent
        args:
        - "-e"
        env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        ports:
          - containerPort: 5066
        securityContext:
          runAsUser: 0
        volumeMounts:
        - name: filebeat-config
          mountPath: /usr/share/filebeat/filebeat.yml
          readOnly: true
          subPath: filebeat.yml
        - name: data
          mountPath: /usr/share/filebeat/data
        - name: varlog
          mountPath: /var/log
          readOnly: true
        - name: varlibdockercontainers
          mountPath: /var/lib/docker/containers
          readOnly: true
      - name: elkdebug-filebeat-prometheus-exporter
        image: "172.28.13.187/library/beat-exporter:0.1.1"
        imagePullPolicy: IfNotPresent
        args:
        ports:
          - containerPort: 9479
      volumes:
      - name: varlog
        hostPath:
          path: /var/log
      - name: varlibdockercontainers
        hostPath:
          path: /var/lib/docker/containers
      - name: filebeat-config
        secret:
          secretName: elkdebug_filebeat
      - name: data
        hostPath:
          path: /var/lib/filebeat
          type: DirectoryOrCreate
      terminationGracePeriodSeconds: 60
      serviceAccountName: elkdebug-filebeat



==================================================================================================================
#keyword: dbsecrets, username, password, credvolume


## To generate secrets using yaml definitions:

#1.encode password                #3.use secret via env           #4.use secret via mounted file                     
$ echo -n 'root' | base64         apiversion: v1                  apiversion: v1 
cm9vdA==                          kind: Pod                       kind: Pod 
$ echo -n 'password' | base64     metadata:                       metadata: 
cGcm3dvch=                          name: nodehelloworld            name: nodehelloworld 
                                    labels:                         labels: 
#2.define secret                      app: helloworld                 app: helloworld                        
apiVersion: v1                    spec:                           spec:                        
kind: Secret                        containers:                     containers:       
metadata:                           - name: k8S-demo                - name: k8s-demo                                   
  name: dbsecrets                     image: wardviaene/k8S-demo    image: wardviaeneIKBS-demo                                               
type: Opaque                          ports:                        ports:
data:                                 - containerPort: 3000         - containerPort: 3000
  username: cm9vdA==                  env:                          volumeMounts:
  password: cGcm3dvch=                - name: SECRET_USERNAME       - name: credvolume  #volume be mounted
                                        valueFrom:                #be stored in file 
                                          secretKeyRef:           #/etc/creds/username
                                            name: dbsecrets       #/etc/creds/password
                                            key: username             mountPath: /etc/creds 
                                      - name: SECRET_PASSWORD         readOnly: true
                                      ...                           volumes:
                                                                    - name: credvolume  #volume be defined
                                                                      secret:
                                                                        secretName:dbsecrets 

$ kubectl describe pod/helloworld-deployment-Z177332065-6czqc
    Image: wardviaene/k85—demo
    Image ID: docker://sha256:eb1148dc1f50bc3b0d4381bc7eb5ddf5e8e4d5f13de15b64463e5e83873e227b
    Port: 3000/TCP
    State: Running
      Started: Tue, 22 Nov 2016 08:57:58 +0100
    Ready: True
    Restart Count: 0
    Volume Mounts:
      /etc/creds from credvolume (ro)
      /var/run/secrets/kubernetes.io/serviceaccount from default-token-hctrk (ro)
    Environment Variables: <none>
Conditions:
  Type Status
  Initialized True
  Ready True
  PodScheduled True
Volumes:
  credvolume:
    Type: Secret (a volume populated by a Secret)
    SecretName: dbsecrets
  default-token-hctrk:
    Type: Secret (a volume populated by a Secret)
    SecretName: default-token—hctrk
    QoS Class: BestEffort
Tolerations: <none>


$ kubectl exec helloworld-deployment-2177332065-6czqc -i -t -- /bin/bash
root@helloworld-deployment—2177332065-6c2qc:/app# cat /etc/creds/username
root
root@helloworld-deployment-2177332065-6czqc:/app# cat /etc/creds/password
password
root@helloworld-deployment-2177332065-6czqc:/app# mount
tmpfs on letc/creds type tmpfs (ro,relatime)
tmpfs on (run/secrets/kubernetes.io/serviceaccount type tmpfs (ro,relatime)
                                        
                                                     
                                        
                                                  
                                    
 
 
 
 
 
 
 
 
 
 
 
 
 

## To generate secrets using files:
$ echo -n ‘root' > ./username.txt
$ echo -n ”password" > ./password.txt
$ kubectl create secret generic dbsecrets -from-file:./username.txt -from-file=./password.txt
secret ‘db-user-pass' created





















