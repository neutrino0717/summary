pygmentize -g <<"EOF"
#!/usr/bin/perl
# https://perldoc.perl.org/perlre.html
# =~ the binding operator
# =~ tells Perl to match the pattern on the right against the string on the left, instead of matching against the default $_ 
# =~ has fairly high precedenceÂ 
# !~ is the opposite of =~

#return value
  $likes_perl = (<STDIN> =~  /\byes\b/i);  
  $likes_perl =  <STDIN> =~  /\byes\b/i;
  if ($likes_perl) { print "You say you like Perl\n"; }
#match
  $num = "123"; if($num =~  /^\d+$/){print "its a num";}
  $num = "123"; if($num =~ m/^\d+$/){print "its a num";} #its a num
#substitute
  $s1="is hooOt"; $s1 =~ s/o+/o/i; print "$s1";  #Perl is hot
  $s1="is hooOt"; $s1 =~ s/o/1/g;  print "$s1";  #Perl is h11Ot
#tr/// is for transliteration:
  $s1="is hooOt"; $s1 =~ tr/oO/12/;print "$s1";  #Perl is h112t

# ?:  no capture
# \Q + \E   #Content between are escaped 
  'aabac^a+' =~ /(^a+)/;     print "$1\n";   #aa
  'aabac^a+' =~ /(\Q^a+\E)/; print "$1\n";   #^a+
  $num = '3.1415'; print "ok" if $num =~ /\Q3.14\E/;  #ok
  $num = '3X1415'; print "ok" if $num =~ /\Q3.14\E/;
  $num = '3X1415'; print "ok" if $num =~ /3.14/;      #ok
#flags
  m  multiline    #^ $ will match start and end of lines
  s  singleline   #. will match a newline
  n  no capture   # /(hi|hello)/n is the saem as /(?:hi|hello)/
EOF
